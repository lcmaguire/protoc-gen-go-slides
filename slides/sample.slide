# Writing protoc-plugins in go

## info

[https://github.com/lcmaguire](https://github.com/lcmaguire)

[linkedin](https://www.linkedin.com/in/liamcmaguire/)

## goal(s)

- protoc 
- protoc-plugin
- proto
- gRPC
- go

## proto

Protocol Buffers are language-neutral, platform-neutral extensible mechanisms for serializing structured data.

.code ../example/sample.proto

## proto fields 

.code ../example/sample.proto /^message User/,/^}/

## proto - enum

.code ../example/sample.proto /^enum MembershipType/,/^}/


.code ../example/sample.pb.go /^type MembershipType int32/,/^}/


## proto - optional

```
optional string example = 7;
```

in go

```
// Example ...
Example *string `protobuf:"bytes,7,name=example,proto3" json:"example,omitempty"`
```

## proto - repeated

```
repeated string interests = 7;
```

in go

```
// Interests contains a set of tags that this user is interested in.
Interests []string `protobuf:"bytes,7,rep,name=interests,proto3" json:"interests,omitempty"`
```

## go struct

.code ../example/sample.pb.go /^type User/,/^}/

## go getter methods
proto
```
int32 page_size = 2;
```
go
```
func (x *ListTalksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return ""
}
```

## Using generated methods

```
type PageSizer interface {
	GetPageSize() int32
}

func HandlePageSize(in PageSizer) (int32, error) {
	if in.GetPageSize() < 0 {
		return -1, errors.New("invalid cannot be less than 0")
	}

	if in.GetPageSize() > 1000 {
		return 1000, nil
	}

	if in.GetPageSize() == 0 {
		return 25, nil
	}

	return in.GetPageSize(), nil
}
```

## proto encoding

the [encoding](https://protobuf.dev/programming-guides/encoding/) of proto messages is based upon field number 

- numbers from 1-15 take 1 byte to encode 
- numbers from 16 through 2047 take up 2 bytes


## proto encoding vs json comparison 

```proto 
message Account {
    string user_id = 1;
    string display_name = 2;
    int32 post_count = 3;
    bool active = 4;
    AccountType account_type = 5;
}
```

json representation which is 125B
```json 
{
    "user_id":"fcfca151-f887-41a3-88d4-98192efad2d9",
    "display_name":"Teresa Green",
    "post_count":100,
    "active":true,
    "account_type":1
}
```

when proto encoded is only 58 bytes
```
[10 36 54 100 49 99 102 100 51 97 45 51 55 101 100 45 52 48 99 57 45 98 48 57 49 45 99 100 100 99 52 53 102 57 51 56 99 100 18 12 84 101 114 101 115 97 32 71 114 101 101 110 24 100 32 1 40 1]
```


## oneofs

[oneofs](https://protobuf.dev/programming-guides/proto3/#oneof) are a way in which only one potential posibility is required

.code ../example/sample.proto /^message Post/,/^}/

## oneofs go 

.code ../example/sample.pb.go /^type Post /,/^}/

## oneofs go 1

.code ../example/sample.pb.go /^type isPost_PostContent interface/,/^}/

```go
type Post_Audio struct {
	// audio post
	Audio *Audio `protobuf:"bytes,4,opt,name=audio,proto3,oneof"`
}

type Post_Video struct {
	// video post
	Video *Video `protobuf:"bytes,5,opt,name=video,proto3,oneof"`
}

type Post_Text struct {
	// text post
	Text string `protobuf:"bytes,6,opt,name=text,proto3,oneof"`
}

func (*Post_Audio) isPost_PostContent() {}

func (*Post_Video) isPost_PostContent() {}

func (*Post_Text) isPost_PostContent() {}
```

## real world scenario

```proto
message Payment {

  Account payment_origin = 1;

  google.Money amount = 2;

  ....  
  oneof payment_destination {
    Account account = 4;
    Bpay bpay = 5;
    PayID pay_id = 6
  }
}
```

## gRPC


- g(oogle, general-purpose, generic)

.image ./assets/grpc-definition.png

Remote Procedure Call

```go

res, err := grpcClient.CallRpc(ctx, request)

```

## gRPC 2

.image ./assets/grpc-flow.png

- simple service definition
- generates client and server interfaces for a large variety of languages
- streaming supported without any additional overhead



## Services

a way to define API's 

.code ../example/sample.proto /^service PostService {/,/^}/

will serve traffic on {baseURL}/{package}.{service}/{method}

- cloud.run/example.PostService/CreatePost

Streaming declarations
``` proto
service StreamingExample {
  // server streaming RPC
  rpc LotsOfReplies(HelloRequest) returns (stream HelloResponse);
  // Client stream RPC
  rpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse);
  // Bidirectional stream RPC
  rpc BidiHello(stream HelloRequest) returns (stream HelloResponse);
}

```

## gRPC service gen code

Client Interface to implement

.code ../example/sample_grpc.pb.go /^type PostServiceClient interface {/,/^}/

Server interface to implement 

.code ../example/sample_grpc.pb.go /^type PostServiceServer interface {/,/^}/



## options / descriptors

[options](https://protobuf.dev/programming-guides/proto3/#options) a way to describe elements within your defined files, services, messages or fields.

don't change the overall meaning of a declaration, but may affect the way it is handled in a particular context.

- file descriptor (language specific package i.e. golang / java package)
- service descriptor some definition/behaviour for all methods in a service
- method descriptor scopes required, http format, idempotency
- message/field descriptor define validation rules for a field/message

## option examples


Field descriptors
```
message User {
  string login = 1 [DEPRECATED = true];
  string email = 2 [(validate.rules).string.email = true];
  ......
}
```

Service descriptor

```
service MyService {
  rpc MyRpc(MyRpcRequest) returns (MyRpcResponse) {
    option (auth.scopes) = {
      required_scopes: [
        {has: "https://my.rpc.com/scopes/myRpc.scope:create"}]
    };
  }
```

## protoc

compiler for proto files

.image ./assets/protocol-buffers-concepts.png

## protoc-plugin

something that plugs in to the protoc compiler


## Why write a protoc-plugin?

- additional methods / functionality for your generated code
- gen documentation
- generate infrastructure (i.e. Network/Firewall rules)
- custom business cases

Example plugins

- [protoc-gen-go-setters](https://github.com/lcmaguire/protoc-gen-go-setters)
- [protoc-gen-validate](https://github.com/bufbuild/protoc-gen-validate)
- [protoc-gen-doc](https://github.com/pseudomuto/protoc-gen-doc)
- [protoc-gen-bq-schema](https://github.com/GoogleCloudPlatform/protoc-gen-bq-schema)
- [protoc-gen-fieldmask](https://github.com/idodod/protoc-gen-fieldmask)


## Realworld scenario

[protoc-gen-go-setters](https://github.com/lcmaguire/protoc-gen-go-setters)

<table>
<tr>
<td> setters </td> <td> Standard go generated code </td>
</tr>
<tr>
<td>

```go

message.SetAudio(&example.Audio{})

With an alternate oneof val

message.SetText("post")

```

</td>
<td>

```go
	message.PostContent = &example.Post_Audio{
		Audio: &example.Audio{
			/* now populate entire audio*/
		},
	}

	With an alternate oneof val

	message.PostContent = &example.Post_Text{
        Text: "text",
    }
```

</td>
</tr>
</table>

## Build pagination packages

Many services take requests that accept a page_token & return a next_page_token

```
service {
    rpc ListBooks(ListBooksRequest) returns (ListBooksResponse) {}
}

message ListBooksRequest {
  .... rest of message
  string page_token = 3;
}

// The response structure from listing books.
message ListBooksResponse {
   .... rest of message
  string next_page_token = 2;
}
```

## Combining it all with the Power of generics & interfaces

[gRPC Pagination](https://github.com/lcmaguire/grpcpagination)


<details><summary>NextPageToken</summary>

```
type PageTokenRequest interface {
	proto.Message
	SetPageToken(in string)
}
```

</details>

<details><summary>NextPageTokenResponse</summary>

```
type NextPageTokenResponse interface {
	proto.Message
	GetNextPageToken() string
}
```

</details>

<details><summary>gRPC func</summary>

```
// GrpcFunc represents a List gRPC func that has a requestType and a response type.
type GrpcFunc[RequestType proto.Message, ResponseType proto.Message] func(ctx context.Context, request RequestType, opts ...grpc.CallOption) (ResponseType, error)
```

</details>

<details><summary>Exit conditions</summary>

```
type FinishFunc[ResponseType proto.Message] func(ctx context.Context, response ResponseType) bool
```

</details>

## Putting it all together


```
func PaginateNextToken[RequestType PageTokenRequest, ResponseType NextPageTokenResponse]
    (ctx context.Context, req RequestType,
    rpc GrpcFunc[RequestType, ResponseType],
    exitCondition FinishFunc[ResponseType]) error {
	for {
		res, err := rpc(ctx, req)
		if err != nil {
			return err
		}

		// if exit condition met
		if exitCondition(ctx, res) {
			break
		}

		// if no next page return.
		if res.GetNextPageToken() == "" {
			break
		}
		// set next page token
		req.SetPageToken(res.GetNextPageToken())
	}

	return nil
}
```

## Using the package

```
count := 0
maxPages := 5
err := PaginateNextToken(ctx,
    &example.ListExampleRequest{}, // pass in req.
    rpc.ListExamples, // pass in RPC.
    func(ctx context.Context, response *example.ListExamplesResponse) bool {
	count++
	return count == expectedCount // define your exit condition
})
if err != nil {
    return nil, err
}
```

## invoking a plugin

taken from [protobuf.dev](https://protobuf.dev/getting-started/gotutorial/#compiling-protocol-buffers)
```
  protoc -I=$SRC_DIR --go_out=$DST_DIR $SRC_DIR/addressbook.proto
```

from go invocation [here](https://protobuf.dev/reference/go/go-generated/#invocation)

```
protoc --proto_path=src \
  --go_opt=Mprotos/buzz.proto=example.com/project/protos/fizz \
  --go_opt=Mprotos/bar.proto=example.com/project/protos/foo \
  protos/buzz.proto protos/bar.proto
```

## better way


personal recommendation is to use [buf cli](https://buf.build/product/cli)

```
    buf generate
```

<details><summary>buf.yaml</summary>

.code ./examples/buf.yaml

</details>


<details><summary>buf.gen.yaml</summary>

.code ./examples/buf.gen.yaml
</details>

## musts when implementing a plugin


- must be an executable named `protoc-gen-{plugin_name}`
- will hang unless it receives a [CodeGeneratorRequest](https://pkg.go.dev/google.golang.org/protobuf/types/pluginpb#CodeGeneratorRequest)
 

## Suggestions

- if your plugin is language specific include the language in your plugin name i.e `protoc-gen-{Language}-{Plugin}` for refrence [plugin.h](https://protobuf.dev/reference/cpp/api-docs/google.protobuf.compiler.plugin/)
- use [CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL](https://pkg.go.dev/google.golang.org/protobuf/types/pluginpb#CodeGeneratorResponse_Feature)
- Skip files not directly included in code generator request
- use protogen.Options to parse any flags/config for your plugin


##  Takeaways

- use buf cli 
- import proto 3 option 
- convert maps to ordered arrays when writing files (to have output deterministic)
- use File to limit generated code to current file
- iterating over fields e.t.c (mention covered by james)  


## Helpful links

- [oneofs](https://protobuf.dev/programming-guides/proto3/#oneof)
- [Well known types](https://protobuf.dev/programming-guides/dos-donts/#well-known-common)
- [full list & mapping of scalar values](https://protobuf.dev/programming-guides/proto3/#scalar)
- [wellknown types](https://protobuf.dev/reference/protobuf/google.protobuf/)
- [enums](https://protobuf.dev/programming-guides/proto3/#enum)
